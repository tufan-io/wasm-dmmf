[package]
name = "wasm-dmmf"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
crate-type = ["cdylib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
wasm-bindgen = { version = "0.2.63" }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

serde = { version = "1.0", features = ["derive"] }
serde-wasm-bindgen = "0.4"
gloo-utils = { version = "0.1", features = ["serde"] }

dmmf = { git = "https://github.com/prisma/prisma-engines/", tag = "4.5.0" }
psl = { git = "https://github.com/prisma/prisma-engines/", tag = "4.5.0" }

# https://rustwasm.github.io/book/reference/code-size.html#compiling-with-link-time-optimizations-lto
[profile.release]
opt-level = "z"
lto = true

[package.metadata.wasm-pack.profile.release]
wasm-opt = ["-Oz"]
